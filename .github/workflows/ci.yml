name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: uv sync --all-extras

    - name: Run ruff linting
      run: uv run ruff check src/

    - name: Run ruff formatting check
      run: uv run ruff format --check src/

    - name: Run mypy type checking
      run: uv run mypy src/mcp_docker/

    - name: Run unit tests with coverage
      run: |
        uv run pytest tests/unit/ \
          -v \
          --cov=mcp_docker \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=90

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
      continue-on-error: true

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:24-dind
        options: --privileged

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Docker
      run: |
        # Docker is already available in ubuntu-latest
        docker --version

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python 3.11
      run: uv python install 3.11

    - name: Install dependencies
      run: uv sync --all-extras

    - name: Pull test images
      run: |
        docker pull alpine:latest
        docker pull alpine:3.18

    - name: Run integration tests
      run: |
        uv run pytest tests/integration/ \
          -v \
          -m "integration" \
          --tb=short \
          --maxfail=5 \
          --cov-fail-under=70

    - name: Cleanup Docker resources
      if: always()
      run: |
        docker system prune -af --volumes || true

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python 3.11
      run: uv python install 3.11

    - name: Install dependencies
      run: uv sync --all-extras

    - name: Run safety check
      run: |
        uv pip install safety
        uv run safety check --json || true
      continue-on-error: true

    - name: Run bandit security linter
      run: |
        uv pip install bandit
        uv run bandit -r src/ -f json || true
      continue-on-error: true

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python 3.11
      run: uv python install 3.11

    - name: Install dependencies
      run: uv sync

    - name: Build package
      run: uv build

    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/
        retention-days: 7
